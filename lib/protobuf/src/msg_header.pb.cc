// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_header.proto

#include "msg_header.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_msg_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IPAddress_msg_5fheader_2eproto;
namespace msg_header {
class IPAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IPAddress> _instance;
} _IPAddress_default_instance_;
class ClientMsgHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientMsgHeader> _instance;
} _ClientMsgHeader_default_instance_;
class ServerMsgHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerMsgHeader> _instance;
} _ServerMsgHeader_default_instance_;
}  // namespace msg_header
static void InitDefaultsscc_info_ClientMsgHeader_msg_5fheader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg_header::_ClientMsgHeader_default_instance_;
    new (ptr) ::msg_header::ClientMsgHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg_header::ClientMsgHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientMsgHeader_msg_5fheader_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClientMsgHeader_msg_5fheader_2eproto}, {
      &scc_info_IPAddress_msg_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_IPAddress_msg_5fheader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg_header::_IPAddress_default_instance_;
    new (ptr) ::msg_header::IPAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg_header::IPAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IPAddress_msg_5fheader_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IPAddress_msg_5fheader_2eproto}, {}};

static void InitDefaultsscc_info_ServerMsgHeader_msg_5fheader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg_header::_ServerMsgHeader_default_instance_;
    new (ptr) ::msg_header::ServerMsgHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg_header::ServerMsgHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerMsgHeader_msg_5fheader_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServerMsgHeader_msg_5fheader_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_5fheader_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_msg_5fheader_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_5fheader_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_msg_5fheader_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg_header::IPAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg_header::IPAddress, ip_),
  PROTOBUF_FIELD_OFFSET(::msg_header::IPAddress, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg_header::ClientMsgHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg_header::ClientMsgHeader, user_id_),
  PROTOBUF_FIELD_OFFSET(::msg_header::ClientMsgHeader, session_id_),
  PROTOBUF_FIELD_OFFSET(::msg_header::ClientMsgHeader, timestamp_),
  PROTOBUF_FIELD_OFFSET(::msg_header::ClientMsgHeader, platform_),
  PROTOBUF_FIELD_OFFSET(::msg_header::ClientMsgHeader, ip_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg_header::ServerMsgHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg_header::ServerMsgHeader, timestamp_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::msg_header::IPAddress)},
  { 7, -1, sizeof(::msg_header::ClientMsgHeader)},
  { 17, -1, sizeof(::msg_header::ServerMsgHeader)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg_header::_IPAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg_header::_ClientMsgHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg_header::_ServerMsgHeader_default_instance_),
};

const char descriptor_table_protodef_msg_5fheader_2eproto[] =
  "\n\020msg_header.proto\022\nmsg_header\"%\n\tIPAddr"
  "ess\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\"\374\001\n\017Client"
  "MsgHeader\022\017\n\007user_id\030\002 \001(\005\022\022\n\nsession_id"
  "\030\003 \001(\t\022\021\n\ttimestamp\030\004 \001(\003\0226\n\010platform\030\005 "
  "\001(\0162$.msg_header.ClientMsgHeader.Platfor"
  "m\022)\n\nip_address\030\006 \001(\0132\025.msg_header.IPAdd"
  "ress\"N\n\010Platform\022\013\n\007UNKNOWN\020\000\022\013\n\007WINDOWS"
  "\020\001\022\t\n\005LINUX\020\002\022\007\n\003MAC\020\003\022\013\n\007ANDROID\020\004\022\007\n\003I"
  "OS\020\005\"$\n\017ServerMsgHeader\022\021\n\ttimestamp\030\004 \001"
  "(\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_msg_5fheader_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_msg_5fheader_2eproto_sccs[3] = {
  &scc_info_ClientMsgHeader_msg_5fheader_2eproto.base,
  &scc_info_IPAddress_msg_5fheader_2eproto.base,
  &scc_info_ServerMsgHeader_msg_5fheader_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_5fheader_2eproto_once;
static bool descriptor_table_msg_5fheader_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fheader_2eproto = {
  &descriptor_table_msg_5fheader_2eproto_initialized, descriptor_table_protodef_msg_5fheader_2eproto, "msg_header.proto", 370,
  &descriptor_table_msg_5fheader_2eproto_once, descriptor_table_msg_5fheader_2eproto_sccs, descriptor_table_msg_5fheader_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_msg_5fheader_2eproto::offsets,
  file_level_metadata_msg_5fheader_2eproto, 3, file_level_enum_descriptors_msg_5fheader_2eproto, file_level_service_descriptors_msg_5fheader_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_msg_5fheader_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_msg_5fheader_2eproto), true);
namespace msg_header {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMsgHeader_Platform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fheader_2eproto);
  return file_level_enum_descriptors_msg_5fheader_2eproto[0];
}
bool ClientMsgHeader_Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientMsgHeader_Platform ClientMsgHeader::UNKNOWN;
constexpr ClientMsgHeader_Platform ClientMsgHeader::WINDOWS;
constexpr ClientMsgHeader_Platform ClientMsgHeader::LINUX;
constexpr ClientMsgHeader_Platform ClientMsgHeader::MAC;
constexpr ClientMsgHeader_Platform ClientMsgHeader::ANDROID;
constexpr ClientMsgHeader_Platform ClientMsgHeader::IOS;
constexpr ClientMsgHeader_Platform ClientMsgHeader::Platform_MIN;
constexpr ClientMsgHeader_Platform ClientMsgHeader::Platform_MAX;
constexpr int ClientMsgHeader::Platform_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void IPAddress::InitAsDefaultInstance() {
}
class IPAddress::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IPAddress::kIpFieldNumber;
const int IPAddress::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IPAddress::IPAddress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_header.IPAddress)
}
IPAddress::IPAddress(const IPAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:msg_header.IPAddress)
}

void IPAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IPAddress_msg_5fheader_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

IPAddress::~IPAddress() {
  // @@protoc_insertion_point(destructor:msg_header.IPAddress)
  SharedDtor();
}

void IPAddress::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IPAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IPAddress& IPAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IPAddress_msg_5fheader_2eproto.base);
  return *internal_default_instance();
}


void IPAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_header.IPAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IPAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ip(), ptr, ctx, "msg_header.IPAddress.ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IPAddress::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_header.IPAddress)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "msg_header.IPAddress.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_header.IPAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_header.IPAddress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IPAddress::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_header.IPAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg_header.IPAddress.ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_header.IPAddress)
}

::PROTOBUF_NAMESPACE_ID::uint8* IPAddress::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_header.IPAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg_header.IPAddress.ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_header.IPAddress)
  return target;
}

size_t IPAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg_header.IPAddress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_header.IPAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const IPAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_header.IPAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_header.IPAddress)
    MergeFrom(*source);
  }
}

void IPAddress::MergeFrom(const IPAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_header.IPAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void IPAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_header.IPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPAddress::CopyFrom(const IPAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_header.IPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPAddress::IsInitialized() const {
  return true;
}

void IPAddress::Swap(IPAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IPAddress::InternalSwap(IPAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientMsgHeader::InitAsDefaultInstance() {
  ::msg_header::_ClientMsgHeader_default_instance_._instance.get_mutable()->ip_address_ = const_cast< ::msg_header::IPAddress*>(
      ::msg_header::IPAddress::internal_default_instance());
}
class ClientMsgHeader::HasBitSetters {
 public:
  static const ::msg_header::IPAddress& ip_address(const ClientMsgHeader* msg);
};

const ::msg_header::IPAddress&
ClientMsgHeader::HasBitSetters::ip_address(const ClientMsgHeader* msg) {
  return *msg->ip_address_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientMsgHeader::kUserIdFieldNumber;
const int ClientMsgHeader::kSessionIdFieldNumber;
const int ClientMsgHeader::kTimestampFieldNumber;
const int ClientMsgHeader::kPlatformFieldNumber;
const int ClientMsgHeader::kIpAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientMsgHeader::ClientMsgHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_header.ClientMsgHeader)
}
ClientMsgHeader::ClientMsgHeader(const ClientMsgHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.has_ip_address()) {
    ip_address_ = new ::msg_header::IPAddress(*from.ip_address_);
  } else {
    ip_address_ = nullptr;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:msg_header.ClientMsgHeader)
}

void ClientMsgHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientMsgHeader_msg_5fheader_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ip_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&ip_address_)) + sizeof(timestamp_));
}

ClientMsgHeader::~ClientMsgHeader() {
  // @@protoc_insertion_point(destructor:msg_header.ClientMsgHeader)
  SharedDtor();
}

void ClientMsgHeader::SharedDtor() {
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ip_address_;
}

void ClientMsgHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientMsgHeader& ClientMsgHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientMsgHeader_msg_5fheader_2eproto.base);
  return *internal_default_instance();
}


void ClientMsgHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_header.ClientMsgHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ip_address_ != nullptr) {
    delete ip_address_;
  }
  ip_address_ = nullptr;
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientMsgHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_session_id(), ptr, ctx, "msg_header.ClientMsgHeader.session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg_header.ClientMsgHeader.Platform platform = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_platform(static_cast<::msg_header::ClientMsgHeader_Platform>(val));
        } else goto handle_unusual;
        continue;
      // .msg_header.IPAddress ip_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_ip_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientMsgHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_header.ClientMsgHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 user_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "msg_header.ClientMsgHeader.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .msg_header.ClientMsgHeader.Platform platform = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_platform(static_cast< ::msg_header::ClientMsgHeader_Platform >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .msg_header.IPAddress ip_address = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ip_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_header.ClientMsgHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_header.ClientMsgHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientMsgHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_header.ClientMsgHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg_header.ClientMsgHeader.session_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session_id(), output);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // .msg_header.ClientMsgHeader.Platform platform = 5;
  if (this->platform() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->platform(), output);
  }

  // .msg_header.IPAddress ip_address = 6;
  if (this->has_ip_address()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::ip_address(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_header.ClientMsgHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientMsgHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_header.ClientMsgHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg_header.ClientMsgHeader.session_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->session_id(), target);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // .msg_header.ClientMsgHeader.Platform platform = 5;
  if (this->platform() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->platform(), target);
  }

  // .msg_header.IPAddress ip_address = 6;
  if (this->has_ip_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::ip_address(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_header.ClientMsgHeader)
  return target;
}

size_t ClientMsgHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg_header.ClientMsgHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // .msg_header.IPAddress ip_address = 6;
  if (this->has_ip_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ip_address_);
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->user_id());
  }

  // .msg_header.ClientMsgHeader.Platform platform = 5;
  if (this->platform() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->platform());
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMsgHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_header.ClientMsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMsgHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientMsgHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_header.ClientMsgHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_header.ClientMsgHeader)
    MergeFrom(*source);
  }
}

void ClientMsgHeader::MergeFrom(const ClientMsgHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_header.ClientMsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.has_ip_address()) {
    mutable_ip_address()->::msg_header::IPAddress::MergeFrom(from.ip_address());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.platform() != 0) {
    set_platform(from.platform());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void ClientMsgHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_header.ClientMsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMsgHeader::CopyFrom(const ClientMsgHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_header.ClientMsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMsgHeader::IsInitialized() const {
  return true;
}

void ClientMsgHeader::Swap(ClientMsgHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientMsgHeader::InternalSwap(ClientMsgHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ip_address_, other->ip_address_);
  swap(user_id_, other->user_id_);
  swap(platform_, other->platform_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMsgHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerMsgHeader::InitAsDefaultInstance() {
}
class ServerMsgHeader::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerMsgHeader::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerMsgHeader::ServerMsgHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_header.ServerMsgHeader)
}
ServerMsgHeader::ServerMsgHeader(const ServerMsgHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:msg_header.ServerMsgHeader)
}

void ServerMsgHeader::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

ServerMsgHeader::~ServerMsgHeader() {
  // @@protoc_insertion_point(destructor:msg_header.ServerMsgHeader)
  SharedDtor();
}

void ServerMsgHeader::SharedDtor() {
}

void ServerMsgHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerMsgHeader& ServerMsgHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerMsgHeader_msg_5fheader_2eproto.base);
  return *internal_default_instance();
}


void ServerMsgHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_header.ServerMsgHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerMsgHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerMsgHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_header.ServerMsgHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_header.ServerMsgHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_header.ServerMsgHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerMsgHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_header.ServerMsgHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_header.ServerMsgHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerMsgHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_header.ServerMsgHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_header.ServerMsgHeader)
  return target;
}

size_t ServerMsgHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg_header.ServerMsgHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerMsgHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_header.ServerMsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerMsgHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerMsgHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_header.ServerMsgHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_header.ServerMsgHeader)
    MergeFrom(*source);
  }
}

void ServerMsgHeader::MergeFrom(const ServerMsgHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_header.ServerMsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void ServerMsgHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_header.ServerMsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMsgHeader::CopyFrom(const ServerMsgHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_header.ServerMsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgHeader::IsInitialized() const {
  return true;
}

void ServerMsgHeader::Swap(ServerMsgHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerMsgHeader::InternalSwap(ServerMsgHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msg_header
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg_header::IPAddress* Arena::CreateMaybeMessage< ::msg_header::IPAddress >(Arena* arena) {
  return Arena::CreateInternal< ::msg_header::IPAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::msg_header::ClientMsgHeader* Arena::CreateMaybeMessage< ::msg_header::ClientMsgHeader >(Arena* arena) {
  return Arena::CreateInternal< ::msg_header::ClientMsgHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::msg_header::ServerMsgHeader* Arena::CreateMaybeMessage< ::msg_header::ServerMsgHeader >(Arena* arena) {
  return Arena::CreateInternal< ::msg_header::ServerMsgHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
